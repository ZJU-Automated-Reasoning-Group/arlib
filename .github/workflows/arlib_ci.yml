name: Arlib CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly run on Sundays

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12', '3.13']
        # '3.8',  FIXME: the numpy version is 3.8 is a bit old
        exclude:
          - os: macos-latest
            python-version: '3.7'

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgmp-dev \
          swig \
          cmake \
          gperf \
          libboost-all-dev \
          build-essential \
          zip \
          ninja-build \
          python3-venv

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        # Uninstall cmake if it exists to avoid tap conflicts
        brew uninstall cmake || true
        brew install \
          gmp \
          swig \
          cmake \
          gperf \
          boost \
          ninja
        # venv is included with Python on macOS from GitHub Actions

    - name: Setup Python virtual environment (Linux)
      if: runner.os == 'Linux'
      run: |
        python -m pip install --upgrade pip setuptools wheel virtualenv
        python -m venv venv
        source venv/bin/activate
        python -m pip install --upgrade pip setuptools wheel
        python -m pip install pytest pytest-cov
        python -m pip install -r requirements.txt
        python -m pip install -e .
        echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV
        echo "$VIRTUAL_ENV/bin" >> $GITHUB_PATH

    - name: Setup Python virtual environment (macOS)
      if: runner.os == 'macOS'
      run: |
        python -m pip install --upgrade pip setuptools wheel virtualenv
        python -m venv venv
        source venv/bin/activate
        python -m pip install --upgrade pip setuptools wheel
        python -m pip install pytest pytest-cov
        python -m pip install -r requirements.txt
        python -m pip install -e .
        echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV
        echo "export PATH=$VIRTUAL_ENV/bin:$PATH" >> ~/.bash_profile
        echo "$VIRTUAL_ENV/bin" >> $GITHUB_PATH

    - name: Download solvers
      run: |
        cd bin_solvers
        python download.py
        chmod +x cvc5 z3
        cd ..

    - name: Run tests
      run: bash unit_test.sh

    #- name: Upload coverage to Codecov
    #  uses: codecov/codecov-action@v3
    #  with:
    #    file: ./coverage.xml
    #    fail_ci_if_error: false

  # Check if docs have changed
  check_docs_changes:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    outputs:
      docs_changed: ${{ steps.filter.outputs.docs }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            docs:
              - 'docs/**'
              - '**/*.md'
              - 'README.md'

  docs:
    runs-on: ubuntu-latest
    needs: [test, check_docs_changes]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master' && needs.check_docs_changes.outputs.docs_changed == 'true'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-venv

    - name: Setup Python virtual environment
      run: |
        python -m pip install --upgrade pip setuptools wheel virtualenv
        python -m venv venv
        source venv/bin/activate
        python -m pip install --upgrade pip
        python -m pip install -r requirements.txt
        python -m pip install -e .
        python -m pip install -r docs/requirements.txt
        echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV
        echo "$VIRTUAL_ENV/bin" >> $GITHUB_PATH

    - name: Build documentation
      run: |
        cd docs && make html

    - name: Deploy documentation to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/build/html
