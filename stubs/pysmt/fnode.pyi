from typing import List

from .typing import PySMTType

class FNode:
    def function_name(self) -> str: ...
    def is_function_application(self) -> bool: ...
    def args(self) -> List[FNode]: ...
    def arg(self, index: int) -> FNode: ...
    def is_quantifier(self) -> bool: ...
    def get_type(self) -> PySMTType: ...
    def symbol_type(self) -> PySMTType: ...
    def symbol_name(self) -> str: ...
    def node_type(self) -> int: ...
    def is_implies(self) -> bool: ...
    def is_or(self) -> bool: ...
    def is_not(self) -> bool: ...
    def is_equals(self) -> bool: ...
    def quantifier_vars(self) -> List[FNode]: ...
